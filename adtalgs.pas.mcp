(* This file is a part of the PascalAdt library, which provides
   commonly used algorithms and data structures for the FPC and Delphi
   compilers.
   
   Copyright (C) 2004 by Lukasz Czajka
   
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License
   as published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.
   
   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.
   
   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
   02110-1301 USA *)

unit adtalgs;

{ this unit provides various algorithms to be used with the PascalAdt
  containers; There are also several iterator classes useful in
  connection with the algorithms; the algorithms are grouped into four
  main sets: @<non-modifying>, @<modifying>, @<mutating>,
  @<sorted-range>, @<set> algorithms and @<container> algorithms. If
  the iterators which are the arguments of a given routine are
  indicated const, then it means that the range is not modified in any
  way and neither are the items themselves; the same applies to
  containers, i.e. if they are indicated const they are not changed in
  any way, if not they may be changed }
{ In most cases when an algorithm routine takes a comparer parameter a
  nil value may be passed to use a default one instead. This, however,
  works only for types for which such a default comparer may be
  reasonably specified, i.e. Integer, Cardinal, Real and String. With
  any other type the use of nil for a comparer parameter will most
  probably result in a segmentation fault.  }

interface

uses
   adtfunct, adtcontbase, adtcont, adtiters;

&include adtdefs.inc

&_mcp_generic_include(adtalgs.i)

implementation

uses
{$ifdef TEST_PASCAL_ADT }
   testutils,
{$endif }
   SysUtils, adtexcept, adtmsg, adtutils, adtdarray;

const
   { the minimal number of items for which the Hoare's k-th element
     algorithm is considered inefficient }
   BfptrMinSize = 50;
   { the minimal number of items for which quick-sort is performed
     instead of insertion-sort }
   qsMinItems = 10;
   { the minimal number of items for which merge-sort is performed
     instead of insertion-sort }
   msMinItems = 10;
   
&_mcp_generic_include(adtalgs_impl.i)   

end.

